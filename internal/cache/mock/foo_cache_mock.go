// Code generated by mockery v2.36.0. DO NOT EDIT.

package mock

import (
	context "context"

	domain "github.com/north70/go-template/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// FooCacheMock is an autogenerated mock type for the FooCache type
type FooCacheMock struct {
	mock.Mock
}

type FooCacheMock_Expecter struct {
	mock *mock.Mock
}

func (_m *FooCacheMock) EXPECT() *FooCacheMock_Expecter {
	return &FooCacheMock_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, id
func (_m *FooCacheMock) Get(ctx context.Context, id string) (*domain.Foo, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.Foo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Foo, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Foo); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Foo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FooCacheMock_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type FooCacheMock_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *FooCacheMock_Expecter) Get(ctx interface{}, id interface{}) *FooCacheMock_Get_Call {
	return &FooCacheMock_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *FooCacheMock_Get_Call) Run(run func(ctx context.Context, id string)) *FooCacheMock_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *FooCacheMock_Get_Call) Return(_a0 *domain.Foo, _a1 error) *FooCacheMock_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FooCacheMock_Get_Call) RunAndReturn(run func(context.Context, string) (*domain.Foo, error)) *FooCacheMock_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: ctx, foo
func (_m *FooCacheMock) Set(ctx context.Context, foo *domain.Foo) error {
	ret := _m.Called(ctx, foo)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Foo) error); ok {
		r0 = rf(ctx, foo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FooCacheMock_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type FooCacheMock_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - foo *domain.Foo
func (_e *FooCacheMock_Expecter) Set(ctx interface{}, foo interface{}) *FooCacheMock_Set_Call {
	return &FooCacheMock_Set_Call{Call: _e.mock.On("Set", ctx, foo)}
}

func (_c *FooCacheMock_Set_Call) Run(run func(ctx context.Context, foo *domain.Foo)) *FooCacheMock_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Foo))
	})
	return _c
}

func (_c *FooCacheMock_Set_Call) Return(_a0 error) *FooCacheMock_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FooCacheMock_Set_Call) RunAndReturn(run func(context.Context, *domain.Foo) error) *FooCacheMock_Set_Call {
	_c.Call.Return(run)
	return _c
}

// NewFooCacheMock creates a new instance of FooCacheMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFooCacheMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *FooCacheMock {
	mock := &FooCacheMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
